{"version":3,"file":"cattle-bridge.umd.js","sources":["../src/printError.ts","../src/dataPipeProcess.ts","../src/ulti/common.ts","../src/processFilter.ts","../src/processResponse.ts","../src/main.ts"],"sourcesContent":["/**\r\n * CattleBridge ThrowError.ts\r\n * 进行错误处理 / 抛出错误\r\n */\r\n\r\n\r\nconst printError = function (type: string, fstmsg: any, ...othmsg: any[]) {\r\n\r\n  let consoleArray: any[] = [\r\n    `[CattleBridge][${type.toUpperCase()}]\\t`,\r\n    fstmsg,\r\n    ...othmsg,\r\n  ];\r\n\r\n  switch (type) {\r\n    case 'throw':\r\n      throw new Error(consoleArray[0] + fstmsg)\r\n    case 'info':\r\n      console.info(...consoleArray)\r\n      break\r\n    case 'warn':\r\n      console.warn(...consoleArray)\r\n      break\r\n    case 'error':\r\n      console.error(...consoleArray)\r\n      break\r\n    case 'log':\r\n    default:\r\n      console.log(...consoleArray)\r\n  }\r\n\r\n}\r\n\r\nprintError['throw'] = function (fstmsg: any, ...othmsg: any[]) {\r\n  printError('throw', fstmsg, ...othmsg);\r\n}\r\n\r\nprintError['error'] = function (fstmsg: any, ...othmsg: any[]) {\r\n  printError('error', fstmsg, ...othmsg);\r\n}\r\n\r\nprintError['log'] = function (fstmsg: any, ...othmsg: any[]) {\r\n  printError('log', fstmsg, ...othmsg);\r\n}\r\n\r\nprintError['info'] = function (fstmsg: any, ...othmsg: any[]) {\r\n  printError('info', fstmsg, ...othmsg);\r\n}\r\n\r\nprintError['warn'] = function (fstmsg: any, ...othmsg: any[]) {\r\n  printError('warn', fstmsg, ...othmsg);\r\n}\r\n\r\nexport default printError\r\n\r\n","\r\n\r\ninterface ChopFunc {\r\n  // 未来对类型会有更严格的要求\r\n  (inp: any, cb1?: Function, cb2?: Function): any\r\n}\r\n\r\nfunction pipeProcess (rawData: any, pipes: ChopFunc[]): any {\r\n  return pipes.reduce((prev: any, curt: ChopFunc): any => {\r\n    if (isFunction(curt)) {\r\n      return curt(prev)\r\n    } else {\r\n      return curt\r\n    }\r\n  }, rawData)\r\n}\r\n\r\nfunction isFunction (fn) {\r\n  return Object.prototype.toString.call(fn) == '[object Function]';\r\n}\r\n\r\nexport default pipeProcess\r\n","\r\n// 扁平化数组\r\nfunction flatArray (...par: any[]) {\r\n  return par.reduce((prev, curt) => {\r\n    if (curt === undefined || curt === null) return prev\r\n    if (Array.isArray(curt)) {\r\n      prev.push(...curt)\r\n    } else {\r\n      prev.push(curt)\r\n    }\r\n    return prev\r\n  }, [])\r\n}\r\n\r\nfunction isFunction (fn: any): fn is Function {\r\n  return Object.prototype.toString.call(fn) == '[object Function]';\r\n}\r\n\r\nexport {isFunction, flatArray}\r\n\r\n","\r\nimport dataPipeProcess from './dataPipeProcess' // 数据管道式处理模块\r\nimport { flatArray, isFunction } from './ulti/common'\r\nimport { Filter } from './interfaces/Filter';\r\nimport { FilterFunc } from './interfaces/FilterFunc';\r\n\r\n// 构造请求参数\r\n\r\nfunction processFilter (filter: Filter, rawInputData: any, gchop: FilterFunc) {\r\n\r\n  // 复制filter 的 Key为参数\r\n  let contactedParams = {}\r\n  const allowedKeys = ['url', 'method'] // 'params', 'data'\r\n  for (let k of allowedKeys) {\r\n    if (filter.hasOwnProperty(k)) {\r\n      contactedParams[k] = filter[k]\r\n    }\r\n  }\r\n\r\n  // 覆盖掉之前的键，注意优先级\r\n  if (filter.request instanceof Object) {\r\n    Object.assign(contactedParams, processFilterItem(filter.request, filter, rawInputData))\r\n  }\r\n  \r\n  // 构造请求参数\r\n  let paramKeys = Object.keys(contactedParams)\r\n  for (let k of paramKeys) {\r\n    contactedParams[k] = processFilterItem(contactedParams[k], filter, rawInputData)\r\n  }\r\n\r\n  // 数据预处理参数\r\n  if (!contactedParams.hasOwnProperty('data')) {\r\n    contactedParams['data'] = dataPipeProcess(\r\n      rawInputData,\r\n      flatArray(\r\n        filter.chop ? filter.chop : undefined,\r\n        gchop ? gchop : undefined\r\n      )\r\n    )\r\n  }\r\n\r\n  return contactedParams\r\n\r\n}\r\n\r\n\r\n// 此函数对输入的选项进行处理\r\n\r\nfunction processFilterItem (itemValue: any, currentFilter: Filter, rawInputData: any): any {\r\n  if (isFunction(itemValue)) {\r\n    return itemValue.call(currentFilter, rawInputData)\r\n  } else {\r\n    return itemValue\r\n  }\r\n}\r\n\r\n\r\nexport default processFilter\r\n\r\n","import printError from './printError'\r\nimport dataPipeProcess from './dataPipeProcess'\r\n\r\nimport { flatArray, isFunction } from './ulti/common'\r\nimport { Filter } from './interfaces/Filter';\r\nimport { FilterFunc } from './interfaces/FilterFunc';\r\n\r\ninterface RequesterResponse {\r\n  data?: any;\r\n  status?: number;\r\n  [propName: string]: any;\r\n}\r\n\r\nconst processResponse = function (response: RequesterResponse, error: any, filter: Filter, gtrim: FilterFunc, stater: any, resolve: Function, reject: Function) {\r\n\r\n  // 获得响应结果、状态和消息 // 返回：结果、状态码、消息文本、友好消息 等等\r\n  const rawOutputData: any = response.data\r\n  let resultFlag: boolean = undefined\r\n  const resultCb = (res: boolean): void => {\r\n    resultFlag = res\r\n  }\r\n\r\n  let proStat: any = isFunction(stater) ? \r\n    stater(resultCb, rawOutputData, response, filter) :\r\n    (stater || response)\r\n\r\n  // 处理 response data / 处理 chop & gchop\r\n  let proOutputData: any = dataPipeProcess(\r\n    rawOutputData,\r\n    flatArray(\r\n      gtrim  || undefined,\r\n      filter.trim || undefined\r\n    )\r\n  )\r\n\r\n  // 打印成功/失败消息（如果有result字段，可以判断的话）\r\n  if (resultFlag !== undefined) {\r\n    let cbp = {data: proOutputData, stat: proStat}\r\n    if (resultFlag) {\r\n      if (isFunction(resolve)) {\r\n        resolve(cbp) \r\n      }\r\n      this.debug && printError(\r\n        'info', '✔ 接口正常\\n',\r\n        '状态: ', cbp.stat, '\\n',\r\n        '数据: ', cbp.data\r\n      );\r\n    } else {\r\n      if (isFunction(reject)) {\r\n        reject(cbp) \r\n      }\r\n      this.debug && printError(\r\n        'warn', '💔 接口错误\\n',\r\n        '数据: ', cbp.data, '\\n',\r\n        '状态: ', cbp.stat\r\n      );\r\n    }\r\n  } else {\r\n    this.debug && printError('warn', '😑你没有指定`stater()`返回result字段，回调不会被执行')\r\n  }\r\n\r\n}\r\n\r\nexport default processResponse\r\n\r\n","// API 数据转接器\r\n// By Bob Green / Super Cattle\r\n\r\nconst debugEnable = true;\r\n\r\n\r\n/**\r\n * \r\n * \r\n * \r\n * CattleBridge 选项列表\r\n * Options：\r\n * \r\n * filters: [Object] 用于过滤的数据处理器\r\n *      handler 自定义处理器\r\n *      chop 对输入数据的处理 Function/Array[Function]\r\n *          chop (inp)\r\n *              接受输入数据，返回值为传送到requster的数据\r\n *      trim 对输出数据的处理 Function/Array[Function]\r\n *          trim (rep)\r\n *              接受返回的数据，输出输出数据\r\n *      inputProcessor 接收数据进行处理，返回requester接受的参数对象 Function\r\n *          inputProcessor(rawInp, choppedInpData)\r\n *          返回的参数对象会和经filter处理后的其他值以及默认值进行合并\r\n *          此函数返回的参数值具有最低的优先级。也就是说，filter项指定的其他参数值可以优先于inputProcessor计算出的参数值传入requester中。\r\n * \r\n *      name 此请求的个性化表述，会出现在debug输出中\r\n *      method 方法（不会进行处理）\r\n *      url 支持参数代入功能 String/Function\r\n *          url(inp)\r\n *      \r\n * debug: 启用调试模式\r\n * \r\n * stater: 处理状态参量\r\n * \r\n * requester: 请求发送器(参照 axio 来实现)\r\n * \r\n * gtrim: 针对接收数据的全局预处理函数\r\n * \r\n * gchop: 针对发送数据的全局终处理函数\r\n * \r\n * \r\n * \r\n */\r\n\r\n/*\r\n * * * * 状态判断回调 * * * *\r\n * 输入：响应体、HTTP状态\r\n * 输出一个字典：成功还是失败result、状态码code、状态消息msg、友好的状态消息friMsg\r\n * \r\n*/\r\n\r\nimport devPrint from './printError' // 调试信息输出模块\r\nimport dataPipeProcess from './dataPipeProcess' // 数据管道式处理模块\r\nimport * as libParams from './params' // 导入常量参数\r\nimport printError from './printError'\r\nimport processFilter from './processFilter'\r\nimport processResponse from './processResponse'\r\nimport { FilterFunc } from './interfaces/FilterFunc';\r\nimport { Filter } from './interfaces/Filter';\r\n\r\n\r\ninterface InputProcessFunction {\r\n  (inp: any, ...cb: any[]): any\r\n}\r\n\r\ninterface Filters {\r\n  [prop: string]: Filter;\r\n}\r\n\r\ninterface StaterFunction {\r\n  (cb: Function, data: any, resp: any, filter: Filter): any\r\n}\r\n\r\ninterface ConstructOptions {\r\n  stater: StaterFunction;\r\n  requester: (requestOptions: any) => any;\r\n  debug?: boolean;\r\n  filters?: Filters;\r\n  gtrim?: FilterFunc;\r\n  gchop?: FilterFunc;\r\n\r\n}\r\n\r\nfunction isFunction (fn) {\r\n  return Object.prototype.toString.call(fn) == '[object Function]';\r\n}\r\n\r\n\r\nclass CattleBridge {\r\n  protected filters: Filters; // 过滤器列表\r\n  protected debug: boolean; // 调试模式\r\n  protected stater: StaterFunction; // Stater 获取响应的stater返回\r\n  protected requester: Function; // 请求发送器 按照axios的API进行调用\r\n  protected gtrim: FilterFunc; // 全局trim处理\r\n  protected gchop: FilterFunc; // 全局chop处理\r\n\r\n  constructor (options: ConstructOptions) {\r\n    this.filters = options.filters\r\n    this.debug = !!options.debug\r\n    this.stater = options.stater\r\n    this.requester = options.requester\r\n    this.gtrim = options.gtrim\r\n    this.gchop = options.gchop\r\n    \r\n    // 校验初始化参数的有效性   // Map type later, maybe.\r\n    if (!(this.filters instanceof Object)) {\r\n      devPrint('throw', \"❌ Invalid Options: filters list\");\r\n    }\r\n    if (!this.filters) {\r\n      devPrint('throw', \"❌ Invalid Options: filters list are expected to be an object\");\r\n    }\r\n    if(!isFunction(this.stater)) {\r\n      devPrint('throw', \"❌ Invalid Options: stater is expected to be a Function\");\r\n    }\r\n  }\r\n\r\n  // 发起请求\r\n  fetch (name: string, input?: any) {\r\n\r\n    if (!(name in this.filters)) {\r\n      devPrint('throw', \"❌ Invalid param `name`: no matched filter in filter list.\");\r\n      return false;\r\n    }\r\n\r\n    let filter = this.filters[name];\r\n    // 打印调试信息\r\n    this.debug && devPrint('info', `⌛ [发起请求] 项目名 ${name}\\n`, `输入参数:`, input)\r\n  \r\n    // 如果用户自定义了处理函数\r\n    if (isFunction(filter.handler)) {\r\n  \r\n      return new Promise ((resolve, reject) => filter.handler(resolve, reject, name, input))\r\n  \r\n    } else {  // 没有自定义函数\r\n      return new Promise ((resolve, reject) => {\r\n        // 处理Filter\r\n        let requestParams: any = processFilter.call(this, filter, input, this.gchop)\r\n        // DEV\r\n        console.log(requestParams)\r\n\r\n        this.requester(requestParams)\r\n        // 如果HTTP正常响应\r\n        .then((rawStat: any) => {\r\n          this.debug && printError('info', '🌐 请求正常')\r\n          processResponse.call(this, rawStat, undefined, filter, this.gtrim, this.stater, resolve, reject)\r\n        // AJAX发生错误\r\n        }, (error: any) => {\r\n          this.debug && printError('info', '🌐 请求错误\\n', 'error: ', error);\r\n          processResponse.call(this, error.response, error, filter, this.gtrim, this.stater, resolve, reject)\r\n        })\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// 模块输出\r\nexport default CattleBridge\r\n"],"names":["printError","type","fstmsg","_i","consoleArray","toUpperCase","othmsg","Error","info","console","warn","error","log","rawData","pipes","reduce","prev","curt","fn","Object","prototype","toString","call","par","undefined","Array","isArray","push","itemValue","currentFilter","rawInputData","isFunction","processResponse","response","filter","gtrim","stater","resolve","reject","rawOutputData","data","resultFlag","proStat","res","proOutputData","dataPipeProcess","flatArray","trim","cbp","stat","debug","options","filters","requester","gchop","this","name","input","devPrint","handler","Promise","requestParams","contactedParams","allowedKeys_1","k","hasOwnProperty","request","assign","processFilterItem","paramKeys_1","keys","_a","chop","_this","then","rawStat"],"mappings":"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"}